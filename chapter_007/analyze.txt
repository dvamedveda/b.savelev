Собрал программу заявок из второго модуля в shaded-jar.
Запустил в консоли с параметрами -Xmx8m -Xms4m
Подключился к процессу программы при помощи Jconsole.
Увидел, что программа при запуске заняла около 50% хипа, или 3.7-3.8 мегабайт в абсолютном значении.
По умолчанию у меня используется G1 GC, который умеет class unloading,
поэтому количество загруженных программой классов постоянно меняется, колеблясь около 2150 (в пике 2510)
Для работы программы используется 12 потоков, несмотря на то, что приложение однопоточное. все остальные потоки,
кроме main() - служебные.
Через некоторое время простоя занятая память увеличилась до 4.5 мегабайт, затем еще после простоя упала до 4.1 мегабайт,
затем также выросла до 4.5 мб.
Все пространство в хипе занято old-gen объектами, young-gen объектов нет, survivor тоже нет, хотя графики показывают,
что они были.
Попробовал создать несколько(четыре заявки), память занятая хипом увеличилась до 4.7 мегабайт.
Попробовал изменить одну из заявок, поискать заявку по номеру, занятая память в хипе увеличилась до 4.9 мб.
Удалил все заявки по одной, занятая память уменьшилась до 4.8 мб
Выполнил принудительную сборку мусора, занятая память уменьшилась до 4.5 мб, то есть программа вернулась к изначальному состоянию.
Это также означает, что в моей программе нет утечек памяти.
Далее попробовал добиться переполнения памяти путем создания заявок с большим количеством текста,
насоздавал их до объема занятой памяти 5.5 мб.
При этом видно, что объем занятой old-gen области памяти линейно растет, а объем занятой памяти в survivor space меняется циклически,
то увеличиваясь, то падая до нуля. Young-gen область памяти практически не меняется на графике (я подозреваю, что оно меняется,
просто это происходит очень быстро и изменения не попадают в момент сбора статистики на график)
В процессе попробовал посмотреть на состояние памяти программы при помощи утилиты jmap. Запустил так:
jmap -histo 1556.
Увидел в распечатке количество загруженных классов и количество инстансов для каждого из них, а также количество
занятой памяти каждым из классов. самое большое количество памяти занято объектами типа java.util.TreeMap$Entry
также попробовал снять дамп хипа командой
jmap -dump:file=F:\dump.txt 1556 (но при простом открытии его блокнотом он оказался нечитабельным,
скорее всего для его просмотра нужна специальная утилита, ради интереса погуглил утилиты, например jhat, не стал заостряться на этом вопросе)
продолжил пробовать переполнять памяти созданием новых заявок.
пока на каком-то из моментов не получил ошибку java.lang.OutOfMemoryError: Java heap space.
это случилось где-то на 7.4 мегабайт занятых в хипе. как написано выше, в консоли с запущенным джарником я получил исключение,
jconsole зафиксировал на графике падение занятой в хипе памяти до 0, и подключение к процессу прервалось.
всего же сборщиком мусора было произведено 262 минорных сборки мусора суммарно на 0.7 секунд и 80 полных сборок суммарно на 2.6 секунд.
по графику видно, что сборщик памяти освобождал память регулярно, но она занималась все больше и больше, пока не кончилась.